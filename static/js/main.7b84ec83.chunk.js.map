{"version":3,"sources":["Butt.js","Butt2.js","Block.js","Rightside.js","Leftside.js","App.js","serviceWorker.js","index.js"],"names":["Butt","useState","color","chColor","style","onClick","className","Butt2","Block","Data","map","post","src","profilelink","width","username","originalname","class","created_at","imglink","text","href","name","comment","type","placeholder","Component","Rightside","User","user","propic","numberofposts","Leftside","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yqkBAoBeA,MAlBf,WACE,IADc,EAKSC,mBAJb,CACRC,MAAO,UAFK,mBAKTA,EALS,KAKFC,EALE,KAYd,OACE,uBAAGC,MAAOF,EAAOG,QAPnB,WAIEF,EAHY,CACVD,MAAO,UAK8BI,UAAU,2BCKtCC,MAlBf,WACE,IADe,EAKQN,mBAJb,CACRC,MAAO,UAFM,mBAKVA,EALU,KAKHC,EALG,KAYf,OACE,uBAAGC,MAAOF,EAAOG,QAPnB,WAIEF,EAHY,CACVD,MAAO,SAK8BI,UAAU,kBAAjD,oBCiCWE,E,uKAxCP,OACI,yBAAKF,UAAU,SAELG,EAAKC,KAAI,SAAAC,GACP,OAEI,yBAAKL,UAAU,6BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,yBAAKM,IAAKD,EAAKE,YAAaC,MAAM,OAAOR,UAAU,WAAW,6BAAK,6BACnE,kBAAC,EAAD,MAAQ,6BAAM,6BAAM,6BAAM,6BAC1B,kBAAC,EAAD,MACA,6BAAM,8BAGV,yBAAKA,UAAU,sBACR,2BAAIK,EAAKI,UACV,gCAAMJ,EAAKK,cAAiB,6BAC5B,0BAAMC,MAAM,aAAaN,EAAKO,YAE9B,6BAAM,6BACN,yBAAKN,IAAKD,EAAKQ,QAASL,MAAM,SAAS,6BACvC,2BAAIH,EAAKS,KAAT,IAAe,uBAAGC,KAAK,uBAAR,YAAf,KACA,uBAAGf,UAAU,WACZ,2BAAIK,EAAKW,MADV,KACsBX,EAAKY,SAE3B,2BAAOC,KAAK,OAAOC,YAAY,2B,GA7BrDC,a,SCoBLC,E,uKApBP,OACI,yBAAKrB,UAAU,mCACX,wCAGAsB,EAAKlB,KAAI,SAAAmB,GACL,OACI,yBAAKvB,UAAU,uBACX,yBAAKW,MAAM,OACP,yBAAKA,MAAM,UAAS,yBAAKL,IAAKiB,EAAKC,OAAQxB,UAAU,SAASQ,MAAM,UACpE,yBAAKG,MAAM,sBACf,2BAAIY,EAAKd,SAAT,UAA0Bc,EAAKE,cAA/B,sB,GAbJL,aCuBTM,G,8KArBP,OACI,yBAAK1B,UAAU,WACf,yBAAKW,MAAM,2BAA2BH,MAAM,QACxC,yBAAKG,MAAM,OACN,uBAAGA,MAAM,wBAAT,SACC,6BAAM,6BACZ,yBAAKA,MAAM,OACN,uBAAGA,MAAM,wBAAT,gBACC,6BAAM,6BACZ,yBAAKA,MAAM,OACN,uBAAGA,MAAM,wBAAT,WACC,6BAAM,6BACZ,yBAAKA,MAAM,OACN,uBAAGA,MAAM,kCAAT,cACC,6BAAM,mC,GAhBLS,cCuBRO,MAnBf,WACE,OACE,yBAAK3B,UAAU,OACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SAAS4B,GAAG,mBAC1B,kBAAC,EAAD,OAED,yBAAK5B,UAAU,iBACd,kBAAC,EAAD,OAED,yBAAKA,UAAU,SAAS4B,GAAG,mBACzB,kBAAC,EAAD,UCNWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7b84ec83.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Butt() {\n  var col = {\n    color: \"black\"\n  };\n\n  var [color, chColor] = useState(col);\n  function changeColor() {\n    const col = {\n      color: \"teal\"\n    };\n    chColor(col);\n  }\n  return (\n    <i style={color} onClick={changeColor} className=\"fa fa-thumbs-up small\" >\n      </i>\n  );\n}\n\nexport default Butt;","import React, { useState } from \"react\";\n\nfunction Butt2() {\n  var col = {\n    color: \"black\"\n  };\n\n  var [color, chColor] = useState(col);\n  function changeColor() {\n    const col = {\n      color: \"red\"\n    };\n    chColor(col);\n  }\n  return (\n    <i style={color} onClick={changeColor} className=\"material-icons\" >favorite_border\n      </i>\n  );\n}\n\nexport default Butt2;","import React, { Component } from 'react'\nimport Data from './Data.json';\nimport Butt from './Butt'\nimport Butt2 from './Butt2'\n\nclass Block extends Component{\n\n    render(){\n        return(\n            <div className=\"Block\">\n               \n                    { Data.map(post => {\n                        return(\n                           \n                            <div className=\"card-panel grey lighten-2\">\n                                <div className=\"row\">\n                                    <div className=\"col s1\">\n                                        <img src={post.profilelink} width=\"100%\" className=\"circle\" /><br/><br />\n                                        <Butt /><br /><br /><br /><br />\n                                        <Butt2 />\n                                        <br /><br />\n                                        \n                                    </div>  \n                                    <div className=\"col s11 left-align\">\n                                           <b>{post.username}</b>\n                                          <i> @{post.originalname}</i><br/>\n                                          <font class=\"grey-text\">{post.created_at}</font>\n\n                                          <br /><br />\n                                          <img src={post.imglink} width=\"100%\" /><br />\n                                          <p>{post.text} <a href=\"http://twitter.com/\">see more</a> </p>\n                                          <p className=\"comment\"> \n                                           <b>{post.name}</b>: {post.comment}\n                                          </p>\n                                          <input type='text' placeholder=\"Add comment\"></input>\n                                          \n                                    </div>  \n                                   \n                                </div>\n                                \n                            </div>\n                        )\n                    })}\n      \n            </div>\n        )\n    }\n}\nexport default Block;","import React, { Component } from 'react'\nimport User from './likes.json';\n\nclass Rightside extends Component{\n    render(){\n        return(\n            <div className=\"card-panel grey lighten-3 fixed\">\n                <h4>TRENDING</h4>\n                \n                { \n                User.map(user=>{\n                    return(\n                        <div className=\"card grey lighten-3\">\n                            <div class=\"row\">\n                                <div class=\"s2 col\"><img src={user.propic} className=\"circle\" width=\"100%\" /></div>\n                                <div class=\"s10 col left-align\">\n                            <b>{user.username} liked {user.numberofposts} posts.</b></div>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\nexport default Rightside;","import React, { Component } from 'react'\nimport { render } from '@testing-library/react'\n\nclass Leftside extends Component{\n    render(){\n        return(\n            <div className=\"col-s12\">\n            <div class=\"center-align fixed white\" width=\"100%\">\n                <div class=\"row\">\n                     <i class=\"material-icons large\">book</i>\n                </div><br /><br />\n                <div class=\"row\">\n                     <i class=\"material-icons large\">chat_bubble</i>\n                </div><br /><br />           \n                <div class=\"row\">\n                     <i class=\"material-icons large\">create</i>\n                </div><br /><br />            \n                <div class=\"row\">\n                     <i class=\"material-icons large grey-text\">dashboard</i>\n                </div><br /><br />  \n            </div>\n            </div>\n        )\n    }\n}\n\nexport default Leftside","import React from 'react';\nimport './App.css';\nimport Data from './Data.json'\nimport Block from './Block'\nimport Rightside from './Rightside';\nimport Leftside from './Leftside'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <div className=\"row\">\n       <div className=\"col s3\" id=\"content-desktop\">\n        <Leftside/>\n       </div>\n       <div className=\"col s6 center\">\n        <Block />\n       </div>\n       <div className=\"col s3\" id=\"content-desktop\">\n         <Rightside />\n         </div>\n     </div>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}